<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="TEST_PitchControl" Id="{0a8e5b1d-3668-41f9-bef4-c801593b9f08}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK TEST_PitchControl EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[LimitSwitches();]]></ST>
    </Implementation>
    <Method Name="LimitSwitches" Id="{cfe4231f-d115-4318-b321-c7df49f7961e}">
      <Declaration><![CDATA[METHOD LimitSwitches
VAR_INPUT

END_VAR
VAR
    fActPosition : LREAL;
    bPitchDone : BOOL;
END_VAR
VAR_INST
    fbPitchControl : FB_PitchControl;

    ExpertMode : BOOL := FALSE;
    PitchManualMode : BOOL := FALSE;

    iStep : UINT := 0;

    rtDone : R_TRIG;

    tonHack : TON := (PT:=T#2s);

END_VAR
VAR CONSTANT
    BwdLimPos : LREAL := -500;
    FwdLimPos : LREAL := 500;

    ForwardTestSP : LREAL := 1000;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fActPosition := GVL_TestStructs.TestPitch_LimitSwitches.Stepper.stAxisStatus.fActPosition;

//GVL_TestStructs.TestPitch_LimitSwitches.
GVL_TestStructs.TestPitch_LimitSwitches.Stepper.bLimitBackwardEnable := GVL_TestStructs.TestPitch_LimitSwitches.Stepper.stAxisStatus.fActPosition > BwdLimPos;
GVL_TestStructs.TestPitch_LimitSwitches.Stepper.bLimitForwardEnable := GVL_TestStructs.TestPitch_LimitSwitches.Stepper.stAxisStatus.fActPosition < FwdLimPos;
GVL_TestStructs.TestPitch_LimitSwitches.Stepper.bHardwareEnable := TRUE;
GVL_TestStructs.TestPitch_LimitSwitches.Stepper.fVelocity := 150.0;

fbPitchControl(Pitch:=GVL_TestStructs.TestPitch_LimitSwitches,
               q_bDone=>bPitchDone,
               q_bBusy=>);
rtDone(CLK:=bPitchDone);

tonHack(IN:=GVL_TestStructs.TestPitch_LimitSwitches.Stepper.Axis.Status.MotionState = MC_AXISSTATE_STANDSTILL);


TEST('PitchControlLimitSwitchTests');
CASE iStep OF


0: // Set SP to 1000, hit a limit, and stop.
// Test failing, not as important with limit switches b/c if you hit the limit you will stop and won't be allowed to move forward until you manually reset the SP to within limits
GVL_TestStructs.TestPitch_LimitSwitches.Stepper.fPosition := ForwardTestSP;

TEST('Forward Limit Switch Stop');
IF fActPosition > FwdLimPos AND rtDone.Q THEN

//    AssertTrue(GVL_TestStructs.TestPitch_LimitSwitches.Stepper.fPosition = fActPosition, 'Setpoint did not reset to stopped position');
    AssertTrue(GVL_TestStructs.TestPitch_LimitSwitches.Stepper.Axis.Status.MotionState = MC_AXISSTATE_STANDSTILL AND NOT GVL_TestStructs.TestPitch_LimitSwitches.Stepper.bAllForwardEnable, 'Did not stop at forward limit');
    TEST_FINISHED_NAMED('Forward Limit Switch Stop');

    iStep := 20;
END_IF


20: // Attempt to back off limit and succeed
GVL_TestStructs.TestPitch_LimitSwitches.Stepper.fPosition := FwdLimPos -1;

TEST('Forward Limit BO');
IF rtDone.Q THEN

//    AssertTrue(GVL_TestStructs.TestPitch_LimitSwitches.Stepper.fPosition = GVL_TestStructs.TestPitch_LimitSwitches.Stepper.stAxisStatus.fActPosition, 'Position not at back off position');
    AssertTrue(GVL_TestStructs.TestPitch_LimitSwitches.Stepper.fPosition = fActPosition, 'Position not at back off position');
    TEST_FINISHED_NAMED('Forward Limit BO');

    iStep := 30;
END_IF


30: // Set SP to beyond bwd limit and stop
GVL_TestStructs.TestPitch_LimitSwitches.Stepper.fPosition := -1*ForwardTestSP;

TEST('Bwd Limit Switch Stop');
IF fActPosition > FwdLimPos AND rtDone.Q THEN

    AssertTrue(GVL_TestStructs.TestPitch_LimitSwitches.Stepper.fPosition = fActPosition, 'Setpoint did not reset to stopped position');

    TEST_FINISHED_NAMED('Bwd Limit Switch Stop');

    iStep := 50;
END_IF

40: // Attempt to move again past bwd limit and be denied

50: // Attempt to back off limit and succeed
GVL_TestStructs.TestPitch_LimitSwitches.Stepper.fPosition := BwdLimPos +1;

TEST('Bwd Limit BO');
IF rtDone.Q THEN

    AssertTrue(GVL_TestStructs.TestPitch_LimitSwitches.Stepper.fPosition = fActPosition, 'Position not at back off position');

    TEST_FINISHED_NAMED('Bwd Limit BO');

    iStep := 8000;
END_IF

60:

8000:
TEST_FINISHED_NAMED('PitchControlLimitSwitchTests');

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="StepperPiezoExchange" Id="{2ba91de8-e34c-4d3a-aea5-0bb97ec6666e}">
      <Declaration><![CDATA[METHOD StepperPiezoExchange
VAR_INPUT

END_VAR
VAR
    fActPosition : LREAL;
END_VAR
VAR_INST
    fbPitchControl : FB_PitchControl;

    ExpertMode : BOOL := FALSE;
    PitchManualMode : BOOL := FALSE;

    iStep : UINT := 0;

END_VAR
VAR CONSTANT
    BwdLimPos : LREAL := -500;
    FwdLimPos : LREAL := 500;

    ForwardTestSP : LREAL := 1000;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fActPosition := GVL_TestStructs.TestPitch_LimitSwitches.Stepper.stAxisStatus.fActPosition;

GVL_TestStructs.TestPitch_LimitSwitches.Stepper.bLimitBackwardEnable := GVL_TestStructs.TestPitch_LimitSwitches.Stepper.stAxisStatus.fActPosition > BwdLimPos;
GVL_TestStructs.TestPitch_LimitSwitches.Stepper.bLimitForwardEnable := GVL_TestStructs.TestPitch_LimitSwitches.Stepper.stAxisStatus.fActPosition < FwdLimPos;
GVL_TestStructs.TestPitch_LimitSwitches.Stepper.bHardwareEnable := TRUE;
GVL_TestStructs.TestPitch_LimitSwitches.Stepper.fVelocity := 150.0;

fbPitchControl(Pitch:=GVL_TestStructs.TestPitch_LimitSwitches,
               q_bDone=>,
               q_bBusy=>);


CASE iStep OF


0: // Set SP to 1000, hit a limit, and stop.
GVL_TestStructs.TestPitch_LimitSwitches.Stepper.fPosition := ForwardTestSP;

TEST('Forward Limit Switch Stop');
IF fActPosition > FwdLimPos AND GVL_TestStructs.TestPitch_LimitSwitches.Stepper.Axis.Status.MotionState = MC_AXISSTATE_STANDSTILL THEN
    AssertTrue(GVL_TestStructs.TestPitch_LimitSwitches.Stepper.Axis.Status.MotionState = MC_AXISSTATE_STANDSTILL, 'Axis not at standstill');
    AssertTrue(GVL_TestStructs.TestPitch_LimitSwitches.Stepper.fPosition = fActPosition, 'Setpoint did not reset to stopped position');

    TEST_FINISHED_NAMED('Forward Limit Switch Stop');
END_IF

10: // Attempt to move again past fwd limit and be denied

20: // Attempt to back off limit and succeed

30: // Set SP to beyond bwd limit and stop

40: // Attempt to move again past bwd limit and be denied

50: // Attempt to back off limit and succeed

END_CASE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>