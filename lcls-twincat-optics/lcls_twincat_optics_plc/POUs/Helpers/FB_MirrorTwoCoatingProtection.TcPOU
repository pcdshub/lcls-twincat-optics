<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_MirrorTwoCoatingProtection" Id="{e481ed92-d77f-4692-a2ea-e5f1d2863716}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MirrorTwoCoatingProtection
VAR_INPUT
    nCurrentEncoderCount : UDINT; // Current encoder count
    neVRange : DWORD; // Current ev range from stCurrentBeamParams

    sDevName : STRING := ''; // Device name

    nUpperCoatingBoundary : UDINT; // Encoder count for upper boundary

    sUpperCoatingType : STRING := ''; // Type of coating

    nLowerCoatingBoundary : UDINT; // Encoder count for lower boundary

    sLowerCoatingType : STRING := ''; // Type of coating

    bAutoClear : BOOL := TRUE; // Auto-clear these fast faults

    bReadPmpsDb : BOOL; // Trigger a re-read of the JSON Beam Parameters

    bUsePmpsDb : BOOL := FALSE; // Set TRUE to lookup Beam Parameters via DB.

    nUpperCoatingBitmask : DWORD := 0;

    nLowerCoatingBitMask : DWORD := 0;

    bMirrorTempFaults : BOOL := FALSE;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
    FFO : FB_HardwareFFOutput;

END_VAR
VAR
    // Coating Enums for local coding, not a readback.
    E_CoatingPos : (Upper:=0, Lower:=1);

    ffUpperCoating: FB_FastFault := (
        i_xAutoReset := FALSE,
        i_TypeCode := 16#401,
        i_Desc := ' mirror coating incompatible with beam photon energy');
    ffLowerCoating : FB_FastFault := (
        i_xAutoReset := FALSE,
        i_TypeCode := 16#401,
        i_Desc := ' mirror coating incompatible with beam photon energy');
    ffBeamParamsNotLoaded : FB_FastFault := (
        i_xAutoReset := TRUE,
        i_TypeCode := 16#488,
        i_Desc := ' mirror coating beam parameters not loaded');

    // Mirrors have two RTDs on the chin guard, Left and Right
    ffUpperCoatingLTemp : FB_TempSensor_FFO;
    ffUpperCoatingRTemp : FB_TempSensor_FFO;
    ffLowerCoatingLTemp : FB_TempSensor_FFO;
    ffLowerCoatingRTemp : FB_TempSensor_FFO;

    aDbStateParams : ARRAY[0..1] OF ST_DbStateParams;
    fbGetCoatingBPs : FB_JsonDocToSafeBP;
    ftReadJsonDocDone : F_TRIG;
    bBPsLoaded : BOOL := FALSE;

    i : INT;
    sDevState : STRING  := '';
    bInit : BOOL;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInit THEN
    ffUpperCoating.i_DevName := sDevName;
    ffLowerCoating.i_DevName := sDevName;
    IF bUsePmpsDb THEN
        FOR i:=0 to 1 BY 1 DO
            sDevState := CONCAT(sDevState, sDevName);
            sDevState := CONCAT(sDevState, '-');
            CASE i OF
            0:
                sDevState := CONCAT(sDevState, sUpperCoatingType);
            1:
                sDevState := CONCAT(sDevState, sLowerCoatingType);
            END_CASE
            aDbStateParams[i].sPmpsState := sDevState;
            sDevState := '';
        END_FOR
    ELSE
        bBPsLoaded := TRUE;
    END_IF
    bInit := TRUE;
END_IF

IF bUsePmpsDb THEN
    IF bReadPmpsDB THEN
        bBPsLoaded := FALSE;
    END_IF

    fbGetCoatingBPs(bExecute := bReadPmpsDB,
        jsonDoc := PMPS_GVL.BP_jsonDoc,
        sDeviceName:=sDevName,
        io_fbFFHWO:=FFO,
        arrStates := aDbStateParams);

    ftReadJsonDocDone(CLK:=fbGetCoatingBPs.bBusy);

    IF ftReadJsonDocDone.Q AND NOT fbGetCoatingBps.bError THEN
        bBPsLoaded := TRUE;
    END_IF

    IF bBPsLoaded THEN
        E_CoatingPos := Upper;
        nUpperCoatingBitmask := aDbStateParams[E_CoatingPos].stBeamParams.neVRange;
        E_CoatingPos := Lower;
        nLowerCoatingBitMask := aDbStateParams[E_CoatingPos].stBeamParams.neVRange;
    END_IF
END_IF

IF nCurrentEncoderCount <= nLowerCoatingBoundary THEN
    ffLowerCoating.i_xOK := (neVRange AND nLowerCoatingBitMask) = neVRange;
    ffUpperCoating.i_xOK  := TRUE;
    IF bMirrorTempFaults THEN
        E_CoatingPos := Lower;
        ffLowerCoatingLTemp(fFaultThreshold:=aDbStateParams[E_CoatingPos].stReactiveParams.nTempSP,
            fHysteresis:= 10.0,
            sDevName:= sDevName,
            bAutoReset:=FALSE,
            io_fbFFHWO:=FFO);
        ffLowerCoatingRTemp(fFaultThreshold:=aDbStateParams[E_CoatingPos].stReactiveParams.nTempSP,
            fHysteresis:= 10.0,
            sDevName:= sDevName,
            bAutoReset:=FALSE,
            io_fbFFHWO:=FFO);
    END_IF
ELSIF nCurrentEncoderCount >= nUpperCoatingBoundary THEN
    ffUpperCoating.i_xOK := (neVRange AND nUpperCoatingBitmask) = neVRange;
    ffLowerCoating.i_xOK := TRUE;
    IF bMirrorTempFaults THEN
        E_CoatingPos := Upper;
        ffUpperCoatingLTemp(fFaultThreshold:=aDbStateParams[E_CoatingPos].stReactiveParams.nTempSP,
            fHysteresis:= 10.0,
            sDevName:= sDevName,
            bAutoReset:=FALSE,
            io_fbFFHWO:=FFO);
        ffUpperCoatingRTemp(fFaultThreshold:=aDbStateParams[E_CoatingPos].stReactiveParams.nTempSP,
            fHysteresis:= 10.0,
            sDevName:= sDevName,
            bAutoReset:=FALSE,
            io_fbFFHWO:=FFO);
    END_IF
ELSE
    ffLowerCoating.i_xOK := FALSE;
    ffUpperCoating.i_xOK := FALSE;

END_IF

ffBeamParamsNotLoaded.i_xOK := bBPsLoaded;

ffUpperCoating(io_fbFFHWO:=FFO, i_xAutoReset := bAutoClear);
ffLowerCoating(io_fbFFHWO:=FFO, i_xAutoReset := bAutoClear);
ffBeamParamsNotLoaded(io_fbFFHWO:=FFO);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>