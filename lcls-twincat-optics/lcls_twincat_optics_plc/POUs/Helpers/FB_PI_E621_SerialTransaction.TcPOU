<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_PI_E621_SerialTransaction" Id="{262af350-d94c-4def-8e0a-b40258768256}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PI_E621_SerialTransaction
VAR_INPUT
    /// rising edge execute
    i_xExecute: BOOL;
    /// Maximum wait time for reply
    i_tTimeOut: TIME := TIME#1s0ms;
    // Command field
    i_sCmd: T_MaxString;
    // Axis field
    i_sAxis: T_MaxString;
    // Parameter field
    i_sParam: T_MaxString;
    // Does command have a reply?  Default behavior is the same as the other drivers.
    i_xExpectReply: BOOL := TRUE;
END_VAR
VAR_OUTPUT
    q_xDone: BOOL;
    q_sResponseData: STRING;
    q_xError: BOOL;
    q_xTimeout: BOOL;
    q_sResult: T_MaxString;
    /// Last String Sent to Serial Device - for debugging
    q_sLastSentString: STRING;
    /// Last String Received from Serial Device - for debugging
    q_sLastReceivedString: STRING;
END_VAR
VAR_IN_OUT
    iq_stSerialRXBuffer: ComBuffer;
    iq_stSerialTXBuffer: ComBuffer;
END_VAR
VAR
    rtExecute: R_TRIG;
    iStep: INT;
    fbClearComBuffer: ClearComBuffer;
    sSendString: STRING;
    fbFormatString: FB_FormatString;
    iChecksum: INT;
    fbSendString: SendString;
    fbReceiveString: ReceiveString;
    sReceivedString: STRING;
    tonTimeout: TON;
    sRXStringForChecksum: STRING;
    sReceiveStringWOChecksum: STRING;
    sRXCheckSum: STRING;
    sRXAddress: STRING;
    sRXParmNum: STRING;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* This function block performs serial transactions with a PI E-816 or compatible comm module *)

(* rising edge trigger *)
rtExecute(CLK:= i_xExecute);
IF rtExecute.Q THEN
    q_xDone	:= FALSE;
    q_sResponseData := '';
    q_xError := FALSE;
    q_sResult:= '';
    q_sLastSentString := '';
    q_sLastReceivedString:= '';
    iStep := 10;
END_IF

CASE iStep OF
    0:
        ; (* idle *)

    10: (* clear com buffers *)
        fbClearComBuffer(Buffer:= iq_stSerialRXBuffer);
        fbClearComBuffer(Buffer:= iq_stSerialTXBuffer);
        (* build the send string *)
        IF i_sParam = '' AND i_sAxis <> '' THEN //Axis but no parameter
            fbFormatString( sFormat:= '%s %s$L',
                arg1:= F_STRING(i_sCmd),
                arg2:= F_STRING(i_sAxis),
                sOut=> sSendString);
        ELSIF i_sParam <> '' AND i_sAxis = '' THEN //Parameter but no axis, global command
            fbFormatString( sFormat:= '%s %s$L',
                arg1:= F_STRING(i_sCmd),
                arg2:= F_STRING(i_sParam), //May not work for all commands, good enough for now
                sOut=> sSendString);
        ELSIF i_sParam = '' AND i_sAxis = '' THEN //Global Query/Command
            fbFormatString( sFormat:= '%s$L',
            arg1:= F_STRING(i_sCmd),
            sOut=> sSendString);
        ELSE
            fbFormatString( sFormat:= '%s %s %s$L',
                arg1:= F_STRING(i_sCmd),
                arg2:= F_STRING(i_sAxis),
                arg3:= F_STRING(i_sParam), //May not work for all commands, good enough for now
                sOut=> sSendString);
        END_IF
        (* send it *)
        fbSendString( SendString:= sSendString, TXbuffer:= iq_stSerialTXBuffer );
        q_sLastSentString := sSendString;
        iStep := iStep + 10;

    20: (* Finish sending the String *)
        IF fbSendString.Busy THEN
            fbSendString( SendString:= sSendString, TXbuffer:= iq_stSerialTXBuffer );
        ELSIF fbSendString.Error <> 0 THEN
            q_sResult := CONCAT('In step 20 fbSendString resulted in error: ', INT_TO_STRING(fbSendString.Error));
            iStep := 9000;
        ELSIF NOT fbSendString.Busy THEN
            IF i_xExpectReply THEN
            iStep := iStep + 10;
            ELSE //No reply expected, transaction complete
            q_xDone:= TRUE;
            q_sResult := 'Success.';
            q_xTimeout := FALSE; //no timeout
            iStep := 100;
            END_IF
        END_IF
        (* Reset receive *)
        fbReceiveString(
            Reset:= TRUE,
            ReceivedString:= sReceivedString,
            RXbuffer:= iq_stSerialRXBuffer );
        tonTimeout(IN:= FALSE);

    30: (* Get reply, if there is one *)
        fbReceiveString(
            Prefix:= ,
            Suffix:= '$L',
            Timeout:= i_tTimeOut,
            Reset:= FALSE,
            ReceivedString:= sReceivedString,
            RXbuffer:= iq_stSerialRXBuffer );
        tonTimeout(IN:= TRUE, PT:= i_tTimeOut);
        IF fbReceiveString.Error <> 0 AND fbReceiveString.Error <> 16#1008 THEN //16#1008 is timeout error
            q_sResult := CONCAT('In step 30 fbReceiveString resulted in error: ', INT_TO_STRING(fbReceiveString.Error));
            iStep := 9000;
        ELSIF fbReceiveString.RxTimeout OR tonTimeout.Q THEN
            q_sResult := 'Device failed to reply within timeout period';
            q_xTimeout := TRUE;
            iStep := 9000;
        ELSIF fbReceiveString.StringReceived THEN
            q_xTimeout := FALSE; //no timeout
            q_sLastReceivedString := sReceivedString;
            q_sResponseData := sReceivedString;
            q_sResult := 'Success.';
            q_xDone:= TRUE;
            iStep := 100;
        END_IF

    100: (* done *)
        IF  i_xExecute = FALSE THEN
            q_xDone:= FALSE;
            iStep := 0;
        END_IF

    9000:
        q_xError := TRUE;

END_CASE]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>